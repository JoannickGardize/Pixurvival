package com.pixurvival.core.contentPack.map;

import com.pixurvival.core.World;
import com.pixurvival.core.contentPack.NamedIdentifiedElement;
import com.pixurvival.core.contentPack.structure.Structure;
import com.pixurvival.core.map.chunk.ChunkPosition;
import com.pixurvival.core.map.generator.ChunkPostProcessor;

import java.util.Collections;
import java.util.List;

public abstract class MapProvider extends NamedIdentifiedElement {

    private static final long serialVersionUID = 1L;

    /**
     * Called one time at the beginning of a game
     *
     * @param world
     */
    public abstract void initialize(World world);

    /**
     * Called before starting to build a chunk, by calling
     * {@link #getTileAt(int, int, float[])} for each of its tiles, then calling
     * {@link #getStructureAt(int, int, Tile, float[])} for each of its tiles. The
     * tiles are called in an unspecified order but must be guaranteed to be always
     * the same for the same ChunkPosition and seed.
     *
     * @param chunkPosition
     */
    public abstract void beginChunk(long seed, ChunkPosition chunkPosition);

    public abstract Tile getTileAt(int x, int y, float[] run);

    /**
     * @param x
     * @param y
     * @param tile the tile computed at position x,y with
     *             {@link #getTileAt(int, int, float[])}
     * @return
     */
    public abstract Structure getStructureAt(int x, int y, Tile tile, float[] run);

    /**
     * Post processors to apply after the chunk is generated by calls to
     * {@link #getTileAt(int, int, float[])} and {@link #getStructureAt(int, int, Tile, float[])}. The
     * processors are called in the order they appear in list.
     *
     * @return
     */
    public List<ChunkPostProcessor> getPostProcessors() {
        return Collections.emptyList();
    }
}
