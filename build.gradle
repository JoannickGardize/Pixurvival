buildscript {


    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    }
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        version = rootProject.file('core/main/resources/version.txt').text.trim()
        appName = "Pixurvival"
        gdxVersion = '1.9.10'
        roboVMVersion = '2.3.1'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
        lombokVersion = '1.18.16'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        jcenter()
        flatDir {
            dirs 'libs'
        }
    }
}

project(":core") {
    apply plugin: "java"


    dependencies {
        compile "com.esotericsoftware:kryonet:2.22.0-RC1"
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
        compile "org.yaml:snakeyaml:1.24"
    }

    test {
        useJUnitPlatform()
    }

    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources"
            }
        }
    }
}

project(":client") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    }
}

project(":contentpack-editor") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    test {
        useJUnitPlatform()
    }

    task editorFatJar(type: Jar) {
        manifest {
            attributes 'Main-Class': "com.pixurvival.contentPackEditor.ContentPackEditor"
        }
        archiveName = "content-pack-editor.jar"
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
}


project(":server") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    test {
        useJUnitPlatform()
    }

    task serverFatJar(type: Jar) {
        manifest {
            attributes 'Main-Class': "com.pixurvival.server.console.ServerConsole"
        }
        archiveName = "server.jar"
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
}

project(":gdx-desktop") {
    apply plugin: "java"

    dependencies {
        compile project(":gdx-core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    }

    sourceSets {
        main {
            resources {
                srcDir '../gdx-core/assets'
                exclude 'contentPacks'
                srcDir '../contentpack-editor/main/resources'
                // TODO le dossier est pr√©sent dans le jar, mais vide
            }
        }
    }

    task clientFatJar(type: Jar) {
        manifest {
            attributes 'Main-Class': "com.pixurvival.desktop.DesktopLauncher"
        }
        archiveName = "pixurvival.jar"
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

}

/*project(":gdx-html") {
    apply plugin: "gwt"
    apply plugin: "war"


    dependencies {
        compile project(":gdx-core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
        
    }
}*/

project(":gdx-core") {
    apply plugin: "java"


    dependencies {
        compile project(":server")
        compile project(":client")
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile name: "discord-rpc"
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
        testImplementation project(':core').sourceSets.test.output
    }

    test {
        useJUnitPlatform()
    }
}

project(":discord-bot") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile project(":server")
        compile 'net.dv8tion:JDA:4.2.0_168'
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    test {
        useJUnitPlatform()
    }

    task botFatJar(type: Jar) {
        manifest {
            attributes 'Main-Class': "com.pixurvival.discordbot.PixBot"
        }
        archiveName = "pixurvival-discord-bot.jar"
        from { (configurations.compile.findAll { !it.path.endsWith(".pom") }).collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
}

task packageDistribution(type: GradleBuild) {
    tasks = ['test', 'clientFatJar', 'serverFatJar', 'editorFatJar', 'botFatJar', 'copyJars', 'copyContentPack', 'zipPackage']
}

task copyJars(type: Copy) {
    from 'gdx-desktop/build/libs/pixurvival.jar', 'server/build/libs/server.jar', 'contentpack-editor/build/libs/content-pack-editor.jar', 'LICENSE'
    into 'build/package'
}

task copyContentPack(type: Copy) {
    from 'gdx-core/assets/contentPacks'
    into 'build/package/contentPacks'
}

task zipPackage(type: Zip) {
    archiveName = "pixurvival-" + project.ext.version + ".zip"
    destinationDir = file("$buildDir")
    from 'build/package'
}

tasks.eclipse.doLast {
    delete ".project"
}